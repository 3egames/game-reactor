{"version":3,"file":"GameComponent.stories-fffa54c6.js","sources":["../../node_modules/react/cjs/react-jsx-runtime.production.min.js","../../node_modules/react/jsx-runtime.js","../../src/GameViewport.ts","../../src/SpriteManager.tsx","../../src/GameElementManager.ts","../../src/GameFontManager.ts","../../src/SoundChannel.ts","../../src/SoundMixer.ts","../../src/GameLog.ts","../../src/Game.tsx","../../src/GameComponent.tsx","../../src/CollisionSets.ts","../../src/GameElement.ts"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","'use client';\n\nimport React, { RefObject } from 'react';\nimport GameElement from './GameElement';\nimport { GameFontConfig } from './GameFontManager';\n\nexport interface DrawPositions {\n  x: number,\n  y: number,\n}\n\nexport interface ViewPortConfig {\n  showCollisions?: boolean,\n  showPerfStats?: boolean,\n  fps: number,\n  width: number,\n  height: number,\n  bgColor?: string | CanvasGradient | CanvasPattern\n}\n\nexport default class GameViewport {\n  // private pens: {};\n  private config: ViewPortConfig;\n  private canvasRef: RefObject<HTMLCanvasElement> | null;\n  private _canvas2DCtx: CanvasRenderingContext2D | null;\n\n  constructor(config: ViewPortConfig) {\n    // this.pens = {\n    //   default: '10px Arial',\n    // }\n    this.config = config;\n    this.canvasRef = null;\n    this._canvas2DCtx = null;\n  }\n\n  get Config() {\n    return this.config;\n  }\n\n  setCanvas2DContext(canvas2DCtx: CanvasRenderingContext2D) {\n    this._canvas2DCtx = canvas2DCtx;\n  }\n\n  set CanvasRef(value: RefObject<HTMLCanvasElement> | null) {\n    this.canvasRef = value;\n  }\n\n  get Canvas2DContext() {\n    if (this.canvasRef && this.canvasRef.current instanceof HTMLCanvasElement) {\n      this._canvas2DCtx = this.canvasRef.current.getContext('2d');\n    }\n    if (!this._canvas2DCtx) throw new Error('Canvas context being accessed but is not available.');\n    return this._canvas2DCtx;\n  }\n\n  clear() {\n    if (this.Canvas2DContext) {\n      this.Canvas2DContext.clearRect(0, 0, this.config.width, this.config.height);\n      this.Canvas2DContext.fillStyle = this.Config.bgColor || \"blue\";\n      this.Canvas2DContext.fillRect(0, 0, this.config.width, this.config.height);\n    }\n  }\n\n  get PagePosition() {\n    const rect = this.canvasRef?.current?.getBoundingClientRect();\n    return {\n      left: rect?.left || 0,\n      top: rect?.top || 0,\n    };\n  }\n\n  drawElement(element: GameElement, pos?: DrawPositions) {\n    if (this.Canvas2DContext) {\n      pos = pos || {\n        x: element.Config.pos.x,\n        y: element.Config.pos.y,\n      };\n      let image = element.ImageSource\n      if (image) {\n        this.Canvas2DContext.drawImage(image, pos.x, pos.y);\n      }\n      // if (self.game.ShowCollisions) {\n      //   if (element.Config.collisions?.Active) {\n      //     self.Canvas2DContext.beginPath();\n      //     let bx;\n      //     for (let i = 0; i < element.Config.collisions.Boxes.length; i += 1) {\n      //       bx = element.Config.collisions.Boxes[i];\n      //       self.Canvas2DContext.strokeStyle = bx.Color;\n      //       self.Canvas2DContext.rect(bx.XPos, bx.YPos, bx.Width, bx.Height);\n      //     }\n      //     self.Canvas2DContext.stroke();\n      //   }\n      // }\n    }\n  }\n\n  drawText(text: string, pos: DrawPositions, font: GameFontConfig) {\n    if (this.Canvas2DContext) {\n      //clean previous font changes\n      this.Canvas2DContext.font = 'Arial';\n      this.Canvas2DContext.fillStyle = 'black';\n      this.Canvas2DContext.strokeStyle = '';\n      pos = pos || { x: 0, y: 0, };\n\n      const size = font.size || '10px';\n      const family = font.family || 'Arial';\n      const color = font.color || '#000';\n      this.Canvas2DContext.font = `${size} ${family}`;\n      this.Canvas2DContext.fillStyle = color;\n      this.Canvas2DContext.fillText(text, pos.x, pos.y);\n      this.Canvas2DContext.textBaseline = 'top';\n      if (font.stroke_width) {\n        this.Canvas2DContext.strokeStyle = font.stroke_color || '#fff';\n        this.Canvas2DContext.lineWidth = font.stroke_width;\n        this.Canvas2DContext.strokeText(text, pos.x, pos.y);\n      }\n    }\n  }\n}\n","import React, { RefObject, createRef } from 'react';\n\nlet self: SpriteManager;\n\ninterface SpriteSource {\n  path: string,\n  ref: RefObject<HTMLImageElement>,\n}\n\ninterface SpriteConfig {\n  source: string,\n  spriteCoordinates: {\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n  },\n  renderOffset: {\n    x: number,\n    y: number,\n  },\n  scale?: number,\n}\n\nconst DEFAULT_CONFIG = {\n  source: '',\n  spriteCoordinates: {\n    x: 0,\n    y: 0,\n    width: 20,\n    height: 20,\n  },\n  renderOffset: {\n    x: 0,\n    y: 0,\n  },\n  scale: 1,\n};\n\n\nexport default class SpriteManager {\n  sources: { [key: string]: SpriteSource };\n  sprites: { [key: string]: SpriteConfig };\n\n  constructor() {\n    this.sources = {};\n    this.sprites = {};\n    self = this;\n  }\n\n  addSource(id: string, path: string) {\n    self.sources[id] = {\n      path,\n      ref: createRef()\n    };\n  }\n\n  getSource(id: string) {\n    return self.sources[id].ref?.current;\n  }\n\n  /**\n   * Adds a new re-usable Sprite in the dicttionary\n   * @param id - The reference id or key to use\n   * @param sourceId - The ID of the source (image spritesheet) to retrieve the sprite from\n   * @param config - The Sprite configuration\n   */\n  addSprite(id: string, sourceId: string, config: SpriteConfig) {\n    if (!this.sources[sourceId]) {\n      throw new Error(`Sprite source ID '${sourceId}' does not exist`);\n    }\n\n    this.sprites[id] = { ...DEFAULT_CONFIG, ...config };\n  }\n\n  getSprite(id: string) {\n    if (!this.sprites[id]) {\n      throw new Error(`Sprite '${id}' does not exist.`);\n    }\n    return this.sprites[id];\n  }\n\n  render() {\n    const images = [];\n    const entries = Object.entries(this.sources);\n    for (const [id, config] of entries) {\n      images.push(<img alt={\"Image for \" + id}\n        ref={config.ref} key={`game-reactor_${config.path}`}\n        src={config.path} hidden={true} />);\n    }\n    return (\n      <div id={`BRAND_ID${'_SPRITES'}`}>\n        {images}\n      </div>\n    );\n  }\n}\n","import Game from './Game';\nimport GameElement from './GameElement';\n\nexport default class GameElementManager {\n  private elements: { [key: string]: GameElement }\n  private elementIndex: GameElement[];\n\n  constructor() {\n    this.elements = {};\n    this.elementIndex = [];\n  }\n\n  add(e: GameElement) {\n    this.elements[e.Config.name] = e;\n    this.elementIndex.push(e);\n  }\n\n  get(name: string) {\n    if (!this.elements[name]) {\n      throw new Error(`Element ${name} not found`);\n    }\n    return this.elements[name];\n  }\n\n  update(game: Game, lapse: number) {\n    for (let i = 0; i < this.elementIndex.length; i += 1) {\n      if (this.elementIndex[i].onUpdate && typeof this.elementIndex[i].onUpdate === 'function') {\n        this.elementIndex[i].onUpdate(game, lapse);\n      }\n    }\n  }\n\n  redraw(game: Game, lapse: number) {\n    //this.game.viewport.clear();\n    for (let i = 0; i < this.elementIndex.length; i += 1) {\n      if (this.elementIndex[i].onDraw && typeof this.elementIndex[i].onDraw === 'function') {\n        this.elementIndex[i].onDraw(game, lapse);\n      }\n    }\n  }\n}\n","export interface GameFontConfig {\n  family?: string,\n  size?: string,\n  color?: string,\n  style?: string,\n  variant?: string,\n  weight?: string,\n  stroke_width?: number,\n  stroke_color?: string,\n}\n\nconst DEFAULT_CONFIG = {\n  family: 'Arial',\n  size: '10px',\n  color: 'black',\n  style: 'normal',\n  variant: 'normal',\n  weight: 'normal',\n};\n\nlet fonts: { [key: string]: GameFontConfig };\n\nexport default class GameFontManager {\n\n  constructor() {\n    fonts = {}; // make sure to clear always\n    this.add('default');\n  }\n\n  add(id: string, config: GameFontConfig = {}) {\n    if (fonts[id]) {\n      throw new Error(`Font '${id}' already set`);\n    }\n    fonts[id] = { ...DEFAULT_CONFIG, ...config };\n  }\n\n  get(id: string) {\n    if (!fonts[id]) {\n      throw new Error(`Font '${id}' not set`);\n    }\n    return fonts[id];\n  }\n}\n","export default class SoundChannel {\n  private audio: HTMLAudioElement;\n  private status: 'playing' | 'ready' | 'paused'\n\n  constructor() {\n    this.status = 'ready';\n    this.audio = new Audio();\n    this.audio.onplay = () => { this.status = 'playing' };\n    this.audio.onplaying = () => { this.status = 'playing' };\n    this.audio.onwaiting = () => { this.status = 'ready' };\n    this.audio.onpause = () => { this.status = 'paused' };\n    this.audio.onended = () => { this.status = 'ready' };\n  }\n\n  public get Status(): string {\n    return this.status;\n  }\n\n  public get Source(): string {\n    return this.audio.src;\n  }\n\n  public set Source(value: string) {\n    this.audio.src = value;\n  }\n\n  async play() {\n    if (typeof window !== 'undefined') {\n      await this.audio.play().catch(e => console.log(e));\n      this.status = 'playing'\n    }\n  }\n\n  pause() {\n    if (typeof window !== 'undefined') this.audio.pause();\n  }\n\n  mute() {\n    if (typeof window !== 'undefined') this.audio.muted = true;\n  }\n\n  unmute() {\n    if (typeof window !== 'undefined') this.audio.muted = false;\n  }\n}\n","import GameLog from \"./GameLog\";\nimport SoundChannel from \"./SoundChannel\";\n\n/** The soundMixer controls multiple layers of Audio and their sources */\nexport default class SoundMixer {\n  private logger: GameLog;\n  private sources: { [key: string]: string };\n  private channels: SoundChannel[];\n\n  /**\n   * Creates a new instance of the SoundMixer\n   * @param logger Game logger to aide in debuging\n   * @param channelCount The number of Audio channels to reserve\n   */\n  constructor(logger: GameLog, channelCount = 10) {\n    this.logger = logger;\n    this.sources = {};\n    this.channels = [];\n    this.logger.info(`Initiating ${channelCount} Audio Channels...`)\n    for (let i = 0; i < channelCount; i += 1) {\n      this.channels[i] = new SoundChannel();\n      this.channels[i].mute();\n    }\n  }\n\n  /** Retrieves the next available Audio channel */\n  private getNextAvailableChannel() {\n    const index = this.channels.findIndex((c) => {\n      return c.Status === 'ready'\n    });\n    if (index < 0) throw new Error('Too much audio playing at once');\n    return index;\n  }\n\n  /**\n   * Adds a new audio source\n   * @param id identifier key\n   * @param path the URI\n   */\n  addSource(id: string, path: string) {\n    if (this.sources[id]) {\n      throw new Error(`Sound source '${id}' already exists`);\n    }\n    this.sources[id] = path;\n    this.logger.debug(`Added sound '${id}' with source '${path}'`)\n  }\n\n  /**\n   * Play a previously added audio source\n   * @param id the identifier key of the audio source\n   */\n  async play(id: string) {\n    if (!this.sources[id]) {\n      throw new Error(`Sound source '${id}' does not exist`);\n    }\n    if (typeof window !== 'undefined') {\n      const sourceIndex = this.getNextAvailableChannel();\n      this.logger.debug(`Playing ${id} on channel#${sourceIndex}`)\n      this.channels[sourceIndex].Source = this.sources[id];\n      this.channels[sourceIndex].unmute();\n      await this.channels[sourceIndex].play();\n    }\n  }\n\n  /** Stop all audio */\n  stopAll() {\n    this.logger.info('Pausing audio channels')\n    if (typeof window !== 'undefined') {\n      this.channels.map(c => {\n        if (c.Status !== 'ready') {\n          c.pause();\n          c.mute();\n        }\n      });\n    }\n  }\n}\n","import Game from \"./Game\";\n\nexport enum GameLogLevels {\n  warn, info, debug\n}\n\nexport default class GameLog {\n  logLevel: GameLogLevels;\n  gameId: string;\n\n  constructor(gameId: string, logLevel: GameLogLevels) {\n    this.logLevel = logLevel;\n    this.gameId = gameId;\n  }\n\n  /**\n   * Debug messages will show only when level is debug\n   * @param message \n   */\n  debug(message: string) {\n    if (this.logLevel == GameLogLevels.debug) {\n      console.log(`[GID${this.gameId}][DEBUG] ${message}`)\n    }\n  }\n\n  /**\n   * Info messages will show when the level is info or greater\n   * @param message \n   */\n  info(message: string) {\n    if (this.logLevel >= GameLogLevels.info) {\n      console.log(`[GID${this.gameId}][INFO] ${message}`)\n    }\n  }\n\n  /**\n     * Warn messages will show when the level is warn or greater\n     * @param message \n     */\n  warn(message: string) {\n    if (this.logLevel >= GameLogLevels.warn) {\n      console.log(`[GID${this.gameId}][WARN] ${message}`)\n    }\n  }\n}\n","import GameViewport, { ViewPortConfig } from './GameViewport';\nimport SpriteManager from './SpriteManager';\nimport GameElementManager from './GameElementManager';\nimport GameFontManager from './GameFontManager';\nimport SoundMixer from './SoundMixer';\nimport GameLog, { GameLogLevels } from './GameLog';\n\nlet self: Game;\nlet gameLoopInterval: ReturnType<typeof setTimeout>;\n\nexport enum GameMouseButtons {\n  unknown, left, right, middle, back, forward\n}\n\nexport interface GameMouseEvent {\n  button: GameMouseButtons,\n  withCtrlKey: boolean,\n  withAltKey: boolean,\n  withMetaKey: boolean,\n  withShiftKey: boolean,\n  x: number,\n  y: number,\n}\n\ninterface GameConfig {\n  name: string,\n  viewport: ViewPortConfig,\n  logLevel?: GameLogLevels,\n}\n\nconst DEFAULT_CONFIG = {\n  name: 'Unnamed Game',\n  viewport: {\n    showCollisions: false,\n    showPerfStats: false,\n    fps: 30,\n    width: 360,\n    height: 270,\n  },\n};\n\nexport default abstract class Game {\n  elements: GameElementManager;\n  config: GameConfig;\n  viewport: GameViewport;\n  state: any;\n  fonts: GameFontManager;\n  sounds: SoundMixer;\n  sprites: SpriteManager;\n  instanceID: number;\n  logger: GameLog;\n\n  constructor(config: GameConfig, state: any) {\n    this.instanceID = Math.round(Math.random() * 1000)\n    this.logger = new GameLog(this.instanceID.toString(), config.logLevel = GameLogLevels.info);\n    this.logger.info('Initializing game instance...');\n    this.state = state;\n    this.config = { ...DEFAULT_CONFIG, ...config };\n    this.viewport = new GameViewport(config.viewport);\n    this.elements = new GameElementManager();\n    this.fonts = new GameFontManager();\n    this.sounds = new SoundMixer(this.logger);\n    this.sprites = new SpriteManager();\n    self = this;\n  }\n\n  abstract onReady(): void;\n  abstract onDisengaged(): void;\n\n  onComponentMounted() {\n    self.logger.info('Game component mounted!')\n    if (gameLoopInterval !== null) {\n      clearInterval(gameLoopInterval);\n    }\n\n    this.onReady();\n    this.startGameLoop();\n  }\n\n  onComponentUnmount() {\n    this.logger.info('Game component unmounted!')\n    if (gameLoopInterval) { // kill old interval\n      clearInterval(gameLoopInterval);\n    }\n    this.sounds.stopAll();\n    this.onDisengaged();\n  }\n\n  get ShowCollisions() { return this.config.viewport.showCollisions; }\n\n  get Name() {\n    return this.config.name;\n  }\n\n  get State() {\n    return self.state;\n  }\n\n  abstract onDraw(lapse: number, sysPerf: any): void;\n  abstract onUpdate(lapse: number): void;\n\n  // My style of a basic game loop :p\n  startGameLoop() {\n    let frameNumber = 1;\n    let nextFrame = (1000 / self.config.viewport.fps) * frameNumber;\n    let secondCounter = 0;\n    let prev = new Date().getTime();\n    let current = prev;\n    let lapse = 0;\n    if (gameLoopInterval) { // kill old interval\n      clearInterval(gameLoopInterval);\n    }\n    gameLoopInterval = setInterval(() => {\n      current = new Date().getTime();\n      lapse = current - prev;\n      secondCounter += lapse;\n      if (secondCounter > nextFrame) {\n        self.onUpdate(lapse);\n        self.onDraw(lapse, { frameNumber });\n        frameNumber += 1;\n        nextFrame = (1000 / self.config.viewport.fps) * frameNumber;\n      }\n      if (secondCounter > 1000) { // reset counters on 1 second mark\n        secondCounter -= 1000;\n        frameNumber = 1;\n        nextFrame = (1000 / self.config.viewport.fps) * frameNumber;\n      }\n      prev = current;\n    }, 10);\n\n  }\n\n  // User action or events\n  onMouseClick?(e: GameMouseEvent) { }\n  onMouseDown?(e: GameMouseEvent) { }\n  onMouseUp?(e: GameMouseEvent) { }\n}\n","\"use client\";\n\nimport React, { FC, useEffect, useRef } from 'react'\nimport Game, { GameMouseButtons, GameMouseEvent } from './Game'\n\nexport interface GameComponentProps {\n  id: string, game: Game, className?: string\n}\n\nconst GameComponent: FC<GameComponentProps> = ({ id, game, className }) => {\n\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n\n  useEffect(() => {\n    game.onComponentMounted();\n    linkCanvasRefs(game);\n    return () => {\n      if (game.onComponentUnmount) game.onComponentUnmount();\n    }\n  }, []);\n\n  /** Retrieves the reference to the 2d context of the canvas */\n  function linkCanvasRefs(game: Game) {\n    game.viewport.CanvasRef = canvasRef\n  }\n\n  function generateCanvsMouseEvent(e: React.MouseEvent): GameMouseEvent {\n    let button = GameMouseButtons.unknown;\n    if (e.button === 0 || e.buttons === 1) {\n      button = GameMouseButtons.left;\n    } else if (e.button === 2 || e.buttons === 2) {\n      button = GameMouseButtons.right;\n    } else if (e.button === 1 || e.buttons === 4) {\n      button = GameMouseButtons.middle;\n    } else if (e.button === 3 || e.buttons === 8) {\n      button = GameMouseButtons.back;\n    } else if (e.button === 4 || e.buttons === 16) {\n      button = GameMouseButtons.forward;\n    }\n    return {\n      button,\n      withCtrlKey: e.ctrlKey,\n      withAltKey: e.altKey,\n      withMetaKey: e.metaKey,\n      withShiftKey: e.shiftKey,\n      x: Math.ceil(e.clientX - game.viewport.PagePosition.left),\n      y: Math.ceil(e.clientY - game.viewport.PagePosition.top),\n    };\n  }\n\n  function handleCanvasClicked(e: React.MouseEvent) {\n    e.preventDefault();\n    if (game.onMouseClick) {\n      game.onMouseClick(generateCanvsMouseEvent(e));\n    }\n  }\n\n  function handleCanvasContextMenu(e: React.MouseEvent) {\n    // this is to rid of that windows context menu appearing when we click the right mouse button.\n    return e.preventDefault();\n  }\n\n  function handleCanvasDoubleClicked(e: React.MouseEvent) {\n    // this is to rid of that apple double tap zoom\n    return e.preventDefault();\n  }\n\n  function handleCanvasFocusLost() {\n    game.state.isPlaying = false;\n  }\n\n  function handleCanvasMouseDown(e: React.MouseEvent) {\n    e.preventDefault();\n    if (game.onMouseDown) {\n      game.onMouseDown(generateCanvsMouseEvent(e));\n    }\n  }\n\n  function handleCanvasMouseUp(e: React.MouseEvent) {\n    e.preventDefault();\n    if (game.onMouseUp) {\n      game.onMouseUp(generateCanvsMouseEvent(e));\n    }\n  }\n\n  return <>\n    <canvas\n      className={className}\n      id={id}\n      ref={canvasRef}\n      height={game.config.viewport.height}\n      width={game.config.viewport.width}\n      onBlur={handleCanvasFocusLost}\n      onClick={handleCanvasClicked}\n      onContextMenu={handleCanvasContextMenu}\n      onDoubleClick={handleCanvasDoubleClicked}\n      onMouseDown={handleCanvasMouseDown}\n      onMouseUp={handleCanvasMouseUp}\n    >\n      Canvas not supported by browser\n    </canvas>\n    {game.sprites.render()}\n  </>\n}\n\nexport default GameComponent","import CollisionBox from './CollisionBox';\nimport GameElement from './GameElement';\n\nexport default class CollisionSets {\n  private boxes: CollisionBox[];\n  private isActive: boolean;\n\n  constructor() {\n    this.boxes = [];\n    this.isActive = false;\n  }\n\n  get Active() {\n    return this.isActive;\n  }\n\n  set Active(val) {\n    this.isActive = val;\n  }\n\n  get Boxes() {\n    return this.boxes;\n  }\n\n  addBox(cbox: CollisionBox) {\n    this.boxes.push(cbox);\n  }\n\n  collidesWithElement(element2: GameElement) {\n    if (this.isActive && element2.Config.collisions?.Active) {\n      let bx1;\n      let bx2;\n      for (let i = 0; i < this.Boxes.length; i++) {\n        for (let j = 0; j < element2.Config.collisions.Boxes.length; j++) {\n          bx1 = this.Boxes[i];\n          bx2 = element2.Config.collisions.Boxes[j];\n          if (bx1.XPos >= bx2.XPos && bx1.XPos <= bx2.X2Pos\n            && bx1.YPos >= bx2.YPos && bx1.YPos <= bx2.Y2Pos) {\n            return true;\n          } else if (bx1.X2Pos >= bx2.XPos && bx1.X2Pos <= bx2.X2Pos\n            && bx1.YPos >= bx2.YPos && bx1.YPos <= bx2.Y2Pos) {\n            return true;\n          } else if (bx1.XPos >= bx2.XPos && bx1.XPos <= bx2.X2Pos\n            && bx1.Y2Pos >= bx2.YPos && bx1.Y2Pos <= bx2.Y2Pos) {\n            return true;\n          } else if (bx1.X2Pos >= bx2.XPos && bx1.X2Pos <= bx2.X2Pos\n            && bx1.Y2Pos >= bx2.YPos && bx1.Y2Pos <= bx2.Y2Pos) {\n            return true;\n          }\n          // reverse test\n          if (bx2.XPos >= bx1.XPos && bx2.XPos <= bx1.X2Pos\n            && bx2.YPos >= bx1.YPos && bx2.YPos <= bx1.Y2Pos) {\n            return true;\n          } else if (bx2.X2Pos >= bx1.XPos && bx2.X2Pos <= bx1.X2Pos\n            && bx2.YPos >= bx1.YPos && bx2.YPos <= bx1.Y2Pos) {\n            return true;\n          } else if (bx2.XPos >= bx1.XPos && bx2.XPos <= bx1.X2Pos\n            && bx2.Y2Pos >= bx1.YPos && bx2.Y2Pos <= bx1.Y2Pos) {\n            return true;\n          } else if (bx2.X2Pos >= bx1.XPos && bx2.X2Pos <= bx1.X2Pos\n            && bx2.Y2Pos >= bx1.YPos && bx2.Y2Pos <= bx1.Y2Pos) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n}\n","import CollisionSets from './CollisionSets';\nimport Game from './Game';\n\nexport interface GameElementConfig {\n  name: string,\n  sprite: string,\n  state: any,\n  collisions?: CollisionSets,\n  animations?: any,\n  pos: { x: number, y: number },\n  size?: { width: number, height: number, scale: number },\n}\n\nconst DEFAULT_CONFIG: GameElementConfig = {\n  name: 'Unnamed Element',\n  sprite: '',\n  state: {\n    enabled: false,\n  },\n  pos: { x: 0, y: 0 },\n  size: { width: 10, height: 10, scale: 1 },\n};\n\nexport function generateConfig(): GameElementConfig {\n  return DEFAULT_CONFIG;\n}\n\n/**\n * This is an abstract class that must be inherited by any GameElement type\n */\nexport default abstract class GameElement {\n  private game: Game;\n  private config: GameElementConfig;\n\n  constructor(game: Game, config: GameElementConfig) {\n    this.game = game;\n    this.config = { ...DEFAULT_CONFIG, ...config };\n    this.config.collisions = new CollisionSets();\n  }\n\n  get ImageSource(): HTMLImageElement | null {\n    return this.game.sprites.getSource(this.config.sprite);\n  }\n\n  get Config() { return this.config; }\n  // get Name() { return this.config.name; }\n\n  // get XPos() { return this.config.pos.x; }\n  // set XPos(v) { this.config.pos.x = v; }\n\n  // get YPos() { return this.config.pos.y; }\n  // set YPos(v) { this.config.pos.y = v; }\n\n  // get Width() { return this.config.size.width; }\n  // set Width(v) { this.config.size.width = v; }\n\n  // get Height() { return this.config.size.height; }\n  // set Height(v) { this.config.size.height = v; }\n\n  // get Scale() { return this.config.size.scale; }\n  // set Scale(v) { this.config.size.scale = v; }\n\n  // get HasCollisions() { return this.config.hasCollisions; }\n\n  // get Collisions() {\n  //   if (!this.HasCollisions) {\n  //     throw new Error(`GameElement '${this.Name}' was not set to use collisions`);\n  //   }\n  //   return this.config.collisions;\n  // }\n\n  // get State() { return this.config.state; }\n\n  // get Sprite() {\n  //   if (!this.config.sprite) {\n  //     throw new Error(`No sprite was referenced for ${this.config.name}`);\n  //   }\n  //   return this.game.Sprites.getSource(this.config.sprite);\n  // }\n\n  abstract onUpdate(game: Game, lapse: number): void;\n\n  abstract onDraw(game: Game, lapse: number): void;\n}\n"],"names":["f","require$$0","k","l","m","n","p","q","c","a","g","b","d","e","h","reactJsxRuntime_production_min","jsxRuntimeModule","GameViewport","config","canvas2DCtx","value","rect","_b","_a","element","pos","image","text","font","size","family","color","self","DEFAULT_CONFIG","SpriteManager","id","path","createRef","sourceId","images","entries","jsx","GameElementManager","name","game","lapse","i","fonts","GameFontManager","SoundChannel","SoundMixer","logger","channelCount","index","sourceIndex","GameLogLevels","GameLogLevels2","GameLog","gameId","logLevel","message","gameLoopInterval","GameMouseButtons","GameMouseButtons2","Game","state","frameNumber","nextFrame","secondCounter","prev","current","GameComponent","className","canvasRef","useRef","useEffect","linkCanvasRefs","game2","generateCanvsMouseEvent","button","handleCanvasClicked","handleCanvasContextMenu","handleCanvasDoubleClicked","handleCanvasFocusLost","handleCanvasMouseDown","handleCanvasMouseUp","jsxs","Fragment","CollisionSets","val","cbox","element2","bx1","bx2","j","GameElement"],"mappings":"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","x_google_ignoreList":[0,1]}